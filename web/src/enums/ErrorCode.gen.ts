// Code generated by protoc-gen-all. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

enum ErrorCode {
  "" = 0,
  InvalidArgument = 1001,
  Internal = 1002,
  Unauthenticated = 1003,
  PermissionDenied = 1004,
  NotFound = 1005,
  UserNotFound = 2001,
  UserDeleted = 2002,
  InMaintenance = 2003,
  AccountBan = 2004,
  NgWordContains = 2005,
  ShopInvalidDay = 2006,
}

namespace ErrorCode {
  export function values(): ErrorCode[] {
    return [
      ErrorCode.InvalidArgument,
      ErrorCode.Internal,
      ErrorCode.Unauthenticated,
      ErrorCode.PermissionDenied,
      ErrorCode.NotFound,
      ErrorCode.UserNotFound,
      ErrorCode.UserDeleted,
      ErrorCode.InMaintenance,
      ErrorCode.AccountBan,
      ErrorCode.NgWordContains,
      ErrorCode.ShopInvalidDay,
    ];
  }

  export function strings(): string[] {
    return [
      "InvalidArgument",
      "Internal",
      "Unauthenticated",
      "PermissionDenied",
      "NotFound",
      "UserNotFound",
      "UserDeleted",
      "InMaintenance",
      "AccountBan",
      "NgWordContains",
      "ShopInvalidDay",
    ];
  }

  export function toEnum(s: string): ErrorCode {
    switch (s) {
      case "InvalidArgument": return ErrorCode.InvalidArgument;
      case "Internal": return ErrorCode.Internal;
      case "Unauthenticated": return ErrorCode.Unauthenticated;
      case "PermissionDenied": return ErrorCode.PermissionDenied;
      case "NotFound": return ErrorCode.NotFound;
      case "UserNotFound": return ErrorCode.UserNotFound;
      case "UserDeleted": return ErrorCode.UserDeleted;
      case "InMaintenance": return ErrorCode.InMaintenance;
      case "AccountBan": return ErrorCode.AccountBan;
      case "NgWordContains": return ErrorCode.NgWordContains;
      case "ShopInvalidDay": return ErrorCode.ShopInvalidDay;
      default: return ErrorCode[""];
    }
  }

  export function toComment(v: ErrorCode): string {
    switch (v) {
      case ErrorCode.InvalidArgument: return "パラメータの不正";
      case ErrorCode.Internal: return "サーバー内部エラー";
      case ErrorCode.Unauthenticated: return "認証エラー";
      case ErrorCode.PermissionDenied: return "アクセス権限なし";
      case ErrorCode.NotFound: return "リソースが見つからなかった";
      case ErrorCode.UserNotFound: return "ユーザーが見つからなかった";
      case ErrorCode.UserDeleted: return "ユーザーは削除済み";
      case ErrorCode.InMaintenance: return "メンテナンス中";
      case ErrorCode.AccountBan: return "アカウント停止中";
      case ErrorCode.NgWordContains: return "NGワードが含まれている";
      case ErrorCode.ShopInvalidDay: return "無効な日付";
      default: return "";
    }
  }
}

export { ErrorCode };
