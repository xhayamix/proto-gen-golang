// Code generated by MockGen. DO NOT EDIT.
// Source: tx_manager.go
//
// Generated by this command:
//
//	mockgen -source=tx_manager.go -destination=mock_database/mock_tx_manager.go
//

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	database "github.com/xhayamix/proto-gen-golang/pkg/domain/database"
)

// MockROTx is a mock of ROTx interface.
type MockROTx struct {
	ctrl     *gomock.Controller
	recorder *MockROTxMockRecorder
}

// MockROTxMockRecorder is the mock recorder for MockROTx.
type MockROTxMockRecorder struct {
	mock *MockROTx
}

// NewMockROTx creates a new mock instance.
func NewMockROTx(ctrl *gomock.Controller) *MockROTx {
	mock := &MockROTx{ctrl: ctrl}
	mock.recorder = &MockROTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockROTx) EXPECT() *MockROTxMockRecorder {
	return m.recorder
}

// GetTxObject mocks base method.
func (m *MockROTx) GetTxObject() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxObject")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetTxObject indicates an expected call of GetTxObject.
func (mr *MockROTxMockRecorder) GetTxObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxObject", reflect.TypeOf((*MockROTx)(nil).GetTxObject))
}

// ReadOnlyImpl mocks base method.
func (m *MockROTx) ReadOnlyImpl() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadOnlyImpl")
}

// ReadOnlyImpl indicates an expected call of ReadOnlyImpl.
func (mr *MockROTxMockRecorder) ReadOnlyImpl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnlyImpl", reflect.TypeOf((*MockROTx)(nil).ReadOnlyImpl))
}

// MockBatchROTx is a mock of BatchROTx interface.
type MockBatchROTx struct {
	ctrl     *gomock.Controller
	recorder *MockBatchROTxMockRecorder
}

// MockBatchROTxMockRecorder is the mock recorder for MockBatchROTx.
type MockBatchROTxMockRecorder struct {
	mock *MockBatchROTx
}

// NewMockBatchROTx creates a new mock instance.
func NewMockBatchROTx(ctrl *gomock.Controller) *MockBatchROTx {
	mock := &MockBatchROTx{ctrl: ctrl}
	mock.recorder = &MockBatchROTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchROTx) EXPECT() *MockBatchROTxMockRecorder {
	return m.recorder
}

// BatchReadOnlyImpl mocks base method.
func (m *MockBatchROTx) BatchReadOnlyImpl() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BatchReadOnlyImpl")
}

// BatchReadOnlyImpl indicates an expected call of BatchReadOnlyImpl.
func (mr *MockBatchROTxMockRecorder) BatchReadOnlyImpl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchReadOnlyImpl", reflect.TypeOf((*MockBatchROTx)(nil).BatchReadOnlyImpl))
}

// GetTxObject mocks base method.
func (m *MockBatchROTx) GetTxObject() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxObject")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetTxObject indicates an expected call of GetTxObject.
func (mr *MockBatchROTxMockRecorder) GetTxObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxObject", reflect.TypeOf((*MockBatchROTx)(nil).GetTxObject))
}

// ReadOnlyImpl mocks base method.
func (m *MockBatchROTx) ReadOnlyImpl() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadOnlyImpl")
}

// ReadOnlyImpl indicates an expected call of ReadOnlyImpl.
func (mr *MockBatchROTxMockRecorder) ReadOnlyImpl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnlyImpl", reflect.TypeOf((*MockBatchROTx)(nil).ReadOnlyImpl))
}

// MockRWTx is a mock of RWTx interface.
type MockRWTx struct {
	ctrl     *gomock.Controller
	recorder *MockRWTxMockRecorder
}

// MockRWTxMockRecorder is the mock recorder for MockRWTx.
type MockRWTxMockRecorder struct {
	mock *MockRWTx
}

// NewMockRWTx creates a new mock instance.
func NewMockRWTx(ctrl *gomock.Controller) *MockRWTx {
	mock := &MockRWTx{ctrl: ctrl}
	mock.recorder = &MockRWTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRWTx) EXPECT() *MockRWTxMockRecorder {
	return m.recorder
}

// GetTxObject mocks base method.
func (m *MockRWTx) GetTxObject() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxObject")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetTxObject indicates an expected call of GetTxObject.
func (mr *MockRWTxMockRecorder) GetTxObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxObject", reflect.TypeOf((*MockRWTx)(nil).GetTxObject))
}

// ReadOnlyImpl mocks base method.
func (m *MockRWTx) ReadOnlyImpl() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadOnlyImpl")
}

// ReadOnlyImpl indicates an expected call of ReadOnlyImpl.
func (mr *MockRWTxMockRecorder) ReadOnlyImpl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnlyImpl", reflect.TypeOf((*MockRWTx)(nil).ReadOnlyImpl))
}

// ReadWriteImpl mocks base method.
func (m *MockRWTx) ReadWriteImpl() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadWriteImpl")
}

// ReadWriteImpl indicates an expected call of ReadWriteImpl.
func (mr *MockRWTxMockRecorder) ReadWriteImpl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWriteImpl", reflect.TypeOf((*MockRWTx)(nil).ReadWriteImpl))
}

// MockTxManager is a mock of TxManager interface.
type MockTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder struct {
	mock *MockTxManager
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager(ctrl *gomock.Controller) *MockTxManager {
	mock := &MockTxManager{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager) EXPECT() *MockTxManagerMockRecorder {
	return m.recorder
}

// BatchReadOnlyTransaction mocks base method.
func (m *MockTxManager) BatchReadOnlyTransaction(ctx context.Context, f func(context.Context, database.BatchROTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchReadOnlyTransaction", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchReadOnlyTransaction indicates an expected call of BatchReadOnlyTransaction.
func (mr *MockTxManagerMockRecorder) BatchReadOnlyTransaction(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchReadOnlyTransaction", reflect.TypeOf((*MockTxManager)(nil).BatchReadOnlyTransaction), ctx, f)
}

// ReadOnlyTransaction mocks base method.
func (m *MockTxManager) ReadOnlyTransaction(ctx context.Context, f func(context.Context, database.ROTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOnlyTransaction", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadOnlyTransaction indicates an expected call of ReadOnlyTransaction.
func (mr *MockTxManagerMockRecorder) ReadOnlyTransaction(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnlyTransaction", reflect.TypeOf((*MockTxManager)(nil).ReadOnlyTransaction), ctx, f)
}

// Transaction mocks base method.
func (m *MockTxManager) Transaction(ctx context.Context, f func(context.Context, database.RWTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockTxManagerMockRecorder) Transaction(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockTxManager)(nil).Transaction), ctx, f)
}
