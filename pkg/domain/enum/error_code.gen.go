// Code generated by protoc-gen-all. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package enum

import (
	"encoding/json"
	"errors"
	"fmt"
	"strconv"
	"strings"

	"github.com/scylladb/go-set/i32set"

	cstrings "github.com/xhayamix/proto-gen-golang/pkg/util/strings"
)

const ErrorCodeName = "ErrorCode"

type ErrorCode int32

const (
	// パラメータの不正
	ErrorCode_InvalidArgument ErrorCode = 1001
	// サーバー内部エラー
	ErrorCode_Internal ErrorCode = 1002
	// 認証エラー
	ErrorCode_Unauthenticated ErrorCode = 1003
	// アクセス権限なし
	ErrorCode_PermissionDenied ErrorCode = 1004
	// リソースが見つからなかった
	ErrorCode_NotFound ErrorCode = 1005
	// ユーザーが見つからなかった
	ErrorCode_UserNotFound ErrorCode = 2001
	// ユーザーは削除済み
	ErrorCode_UserDeleted ErrorCode = 2002
	// メンテナンス中
	ErrorCode_InMaintenance ErrorCode = 2003
	// アカウント停止中
	ErrorCode_AccountBan ErrorCode = 2004
	// NGワードが含まれている
	ErrorCode_NgWordContains ErrorCode = 2005
	// 無効な日付
	ErrorCode_ShopInvalidDay ErrorCode = 2006
)

var ErrorCodeMap = map[string]int32{
	"InvalidArgument":  1001,
	"Internal":         1002,
	"Unauthenticated":  1003,
	"PermissionDenied": 1004,
	"NotFound":         1005,
	"UserNotFound":     2001,
	"UserDeleted":      2002,
	"InMaintenance":    2003,
	"AccountBan":       2004,
	"NgWordContains":   2005,
	"ShopInvalidDay":   2006,
}

func (e ErrorCode) Int() int {
	return int(e)
}

func (e ErrorCode) Int32() int32 {
	return int32(e)
}

func (e ErrorCode) Int64() int64 {
	return int64(e)
}

func (e ErrorCode) String() string {
	switch e {
	case ErrorCode_InvalidArgument:
		return "InvalidArgument"
	case ErrorCode_Internal:
		return "Internal"
	case ErrorCode_Unauthenticated:
		return "Unauthenticated"
	case ErrorCode_PermissionDenied:
		return "PermissionDenied"
	case ErrorCode_NotFound:
		return "NotFound"
	case ErrorCode_UserNotFound:
		return "UserNotFound"
	case ErrorCode_UserDeleted:
		return "UserDeleted"
	case ErrorCode_InMaintenance:
		return "InMaintenance"
	case ErrorCode_AccountBan:
		return "AccountBan"
	case ErrorCode_NgWordContains:
		return "NgWordContains"
	case ErrorCode_ShopInvalidDay:
		return "ShopInvalidDay"
	case 0:
		return ""
	}
	return strconv.FormatInt(int64(e), 10)
}

func (e ErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *ErrorCode) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}
	switch strings.ToLower(s) {
	case "invalidargument":
		*e = ErrorCode_InvalidArgument
	case "internal":
		*e = ErrorCode_Internal
	case "unauthenticated":
		*e = ErrorCode_Unauthenticated
	case "permissiondenied":
		*e = ErrorCode_PermissionDenied
	case "notfound":
		*e = ErrorCode_NotFound
	case "usernotfound":
		*e = ErrorCode_UserNotFound
	case "userdeleted":
		*e = ErrorCode_UserDeleted
	case "inmaintenance":
		*e = ErrorCode_InMaintenance
	case "accountban":
		*e = ErrorCode_AccountBan
	case "ngwordcontains":
		*e = ErrorCode_NgWordContains
	case "shopinvalidday":
		*e = ErrorCode_ShopInvalidDay
	default:
		i, _ := strconv.ParseInt(s, 10, 64)
		*e = ErrorCode(int32(i))
	}
	return nil
}

func (e ErrorCode) EncodeSpanner() (interface{}, error) {
	return e.Int64(), nil
}

func (e *ErrorCode) DecodeSpanner(val interface{}) error {
	strVal, ok := val.(string)
	if !ok {
		return errors.New(fmt.Sprintf("ErrorCode.DecodeSpanner failed. %#v", val))
	}
	i, err := strconv.ParseInt(strVal, 10, 64)
	if err != nil {
		return errors.New(fmt.Sprintf("ErrorCode.DecodeSpanner failed. %#v, %#v", val, err))
	}
	*e = ErrorCode(i)
	return nil
}

func (e ErrorCode) Validate() bool {
	switch e {
	case ErrorCode_InvalidArgument:
		return true
	case ErrorCode_Internal:
		return true
	case ErrorCode_Unauthenticated:
		return true
	case ErrorCode_PermissionDenied:
		return true
	case ErrorCode_NotFound:
		return true
	case ErrorCode_UserNotFound:
		return true
	case ErrorCode_UserDeleted:
		return true
	case ErrorCode_InMaintenance:
		return true
	case ErrorCode_AccountBan:
		return true
	case ErrorCode_NgWordContains:
		return true
	case ErrorCode_ShopInvalidDay:
		return true
	}
	return false
}

type ErrorCodeSlice []ErrorCode

func (e ErrorCodeSlice) First() ErrorCode {
	if len(e) == 0 {
		return 0
	}
	return e[0]
}

func (e ErrorCodeSlice) Last() ErrorCode {
	if len(e) == 0 {
		return 0
	}
	return e[len(e)-1]
}

func (e ErrorCodeSlice) Set() *i32set.Set {
	set := i32set.New()
	for _, i := range e {
		set.Add(i.Int32())
	}
	return set
}

func (e ErrorCodeSlice) Each(f func(Enum) bool) {
	for _, i := range e {
		if !f(i) {
			break
		}
	}
}

func (e ErrorCodeSlice) Size() int {
	return len(e)
}

func (e ErrorCodeSlice) Includes(typ ErrorCode) bool {
	for _, i := range e {
		if i == typ {
			return true
		}
	}

	return false
}

func (e ErrorCodeSlice) Strings() []string {
	s := make([]string, 0, len(e))
	for _, i := range e {
		s = append(s, i.String())
	}
	return s
}

func (e ErrorCodeSlice) ToSet() ErrorCodeSet {
	s := make(ErrorCodeSet, len(e))
	for _, i := range e {
		s.Add(i)
	}
	return s
}

func (e ErrorCodeSlice) EncodeSpanner() (interface{}, error) {
	ret := make([]int64, 0, e.Size())
	for _, i := range e {
		ret = append(ret, i.Int64())
	}
	return ret, nil
}

func (e ErrorCodeSlice) Validate() bool {
	for _, i := range e {
		if !i.Validate() {
			return false
		}
	}
	return true
}

var ErrorCodeValues = ErrorCodeSlice{
	ErrorCode_InvalidArgument,
	ErrorCode_Internal,
	ErrorCode_Unauthenticated,
	ErrorCode_PermissionDenied,
	ErrorCode_NotFound,
	ErrorCode_UserNotFound,
	ErrorCode_UserDeleted,
	ErrorCode_InMaintenance,
	ErrorCode_AccountBan,
	ErrorCode_NgWordContains,
	ErrorCode_ShopInvalidDay,
}

type ErrorCodeSet map[ErrorCode]struct{}

func (s ErrorCodeSet) Has(e ErrorCode) bool {
	_, ok := s[e]
	return ok
}

func (s ErrorCodeSet) Size() int {
	return len(s)
}

func (s ErrorCodeSet) Add(e ErrorCode) {
	s[e] = struct{}{}
}

func (s ErrorCodeSet) ToSlice() ErrorCodeSlice {
	slice := make(ErrorCodeSlice, 0, len(s))
	for _, v := range ErrorCodeValues {
		if s.Has(v) {
			slice = append(slice, v)
		}
	}
	return slice
}

type ErrorCodeCommaSeparated string

func (e ErrorCodeCommaSeparated) Split() (Enums, []string) {
	var errs []string
	list := cstrings.SplitComma(string(e))
	res := make(ErrorCodeSlice, 0, len(list))

	for _, str := range list {
		i, err := strconv.Atoi(str)
		if err != nil {
			errs = append(errs, fmt.Sprintf("failed to convert enum.ErrorCode. %v\n", str))
			continue
		}
		res = append(res, ErrorCode(i))
	}

	return res, errs
}

func (e ErrorCodeCommaSeparated) String() string {
	list, _ := e.Split()
	res := make([]string, 0, list.Size())
	list.Each(func(i Enum) bool {
		res = append(res, i.String())
		return true
	})
	return strings.Join(res, ",")
}

func (e ErrorCodeCommaSeparated) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *ErrorCodeCommaSeparated) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}
	list := cstrings.SplitComma(s)
	res := make([]string, 0, len(s))
	for _, str := range list {
		var i ErrorCode
		err := i.UnmarshalJSON([]byte(`"` + str + `"`))
		if err != nil {
			return err
		}
		res = append(res, strconv.FormatInt(i.Int64(), 10))
	}
	*e = ErrorCodeCommaSeparated(strings.Join(res, ","))
	return nil
}

var ErrorCodeValueDetails = ValueDetails{
	{Type: ErrorCode_InvalidArgument, Comment: "パラメータの不正"},
	{Type: ErrorCode_Internal, Comment: "サーバー内部エラー"},
	{Type: ErrorCode_Unauthenticated, Comment: "認証エラー"},
	{Type: ErrorCode_PermissionDenied, Comment: "アクセス権限なし"},
	{Type: ErrorCode_NotFound, Comment: "リソースが見つからなかった"},
	{Type: ErrorCode_UserNotFound, Comment: "ユーザーが見つからなかった"},
	{Type: ErrorCode_UserDeleted, Comment: "ユーザーは削除済み"},
	{Type: ErrorCode_InMaintenance, Comment: "メンテナンス中"},
	{Type: ErrorCode_AccountBan, Comment: "アカウント停止中"},
	{Type: ErrorCode_NgWordContains, Comment: "NGワードが含まれている"},
	{Type: ErrorCode_ShopInvalidDay, Comment: "無効な日付"},
}
