// Code generated by MockGen. DO NOT EDIT.
// Source: util.go
//
// Generated by this command:
//
//	mockgen -source=util.go -destination=mock_random/mock_util.go
//

// Package mock_random is a generated GoMock package.
package mock_random

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	random "github.com/xhayamix/proto-gen-golang/pkg/util/random"
)

// MockPickable is a mock of Pickable interface.
type MockPickable struct {
	ctrl     *gomock.Controller
	recorder *MockPickableMockRecorder
}

// MockPickableMockRecorder is the mock recorder for MockPickable.
type MockPickableMockRecorder struct {
	mock *MockPickable
}

// NewMockPickable creates a new mock instance.
func NewMockPickable(ctrl *gomock.Controller) *MockPickable {
	mock := &MockPickable{ctrl: ctrl}
	mock.recorder = &MockPickableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPickable) EXPECT() *MockPickableMockRecorder {
	return m.recorder
}

// GetRatio mocks base method.
func (m *MockPickable) GetRatio() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatio")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetRatio indicates an expected call of GetRatio.
func (mr *MockPickableMockRecorder) GetRatio() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatio", reflect.TypeOf((*MockPickable)(nil).GetRatio))
}

// MockRand is a mock of Rand interface.
type MockRand struct {
	ctrl     *gomock.Controller
	recorder *MockRandMockRecorder
}

// MockRandMockRecorder is the mock recorder for MockRand.
type MockRandMockRecorder struct {
	mock *MockRand
}

// NewMockRand creates a new mock instance.
func NewMockRand(ctrl *gomock.Controller) *MockRand {
	mock := &MockRand{ctrl: ctrl}
	mock.recorder = &MockRandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRand) EXPECT() *MockRandMockRecorder {
	return m.recorder
}

// BulkPick mocks base method.
func (m *MockRand) BulkPick(drawCount int, pickables []random.Pickable) []random.Pickable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkPick", drawCount, pickables)
	ret0, _ := ret[0].([]random.Pickable)
	return ret0
}

// BulkPick indicates an expected call of BulkPick.
func (mr *MockRandMockRecorder) BulkPick(drawCount, pickables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkPick", reflect.TypeOf((*MockRand)(nil).BulkPick), drawCount, pickables)
}

// BulkPickNoDuplication mocks base method.
func (m *MockRand) BulkPickNoDuplication(drawCount int, origin []random.Pickable) []random.Pickable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkPickNoDuplication", drawCount, origin)
	ret0, _ := ret[0].([]random.Pickable)
	return ret0
}

// BulkPickNoDuplication indicates an expected call of BulkPickNoDuplication.
func (mr *MockRandMockRecorder) BulkPickNoDuplication(drawCount, origin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkPickNoDuplication", reflect.TypeOf((*MockRand)(nil).BulkPickNoDuplication), drawCount, origin)
}

// Hit mocks base method.
func (m *MockRand) Hit(rate int64, denominator int32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hit", rate, denominator)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Hit indicates an expected call of Hit.
func (mr *MockRandMockRecorder) Hit(rate, denominator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hit", reflect.TypeOf((*MockRand)(nil).Hit), rate, denominator)
}

// HitPercent mocks base method.
func (m *MockRand) HitPercent(rate int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HitPercent", rate)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HitPercent indicates an expected call of HitPercent.
func (mr *MockRandMockRecorder) HitPercent(rate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HitPercent", reflect.TypeOf((*MockRand)(nil).HitPercent), rate)
}

// HitPermil mocks base method.
func (m *MockRand) HitPermil(rate int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HitPermil", rate)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HitPermil indicates an expected call of HitPermil.
func (mr *MockRandMockRecorder) HitPermil(rate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HitPermil", reflect.TypeOf((*MockRand)(nil).HitPermil), rate)
}

// HitPermyriad mocks base method.
func (m *MockRand) HitPermyriad(rate int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HitPermyriad", rate)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HitPermyriad indicates an expected call of HitPermyriad.
func (mr *MockRandMockRecorder) HitPermyriad(rate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HitPermyriad", reflect.TypeOf((*MockRand)(nil).HitPermyriad), rate)
}

// NewRandomUUID mocks base method.
func (m *MockRand) NewRandomUUID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRandomUUID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRandomUUID indicates an expected call of NewRandomUUID.
func (mr *MockRandMockRecorder) NewRandomUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRandomUUID", reflect.TypeOf((*MockRand)(nil).NewRandomUUID))
}

// NextBool mocks base method.
func (m *MockRand) NextBool() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextBool")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NextBool indicates an expected call of NextBool.
func (mr *MockRandMockRecorder) NextBool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextBool", reflect.TypeOf((*MockRand)(nil).NextBool))
}

// NextInt31n mocks base method.
func (m *MockRand) NextInt31n(n int32) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextInt31n", n)
	ret0, _ := ret[0].(int32)
	return ret0
}

// NextInt31n indicates an expected call of NextInt31n.
func (mr *MockRandMockRecorder) NextInt31n(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextInt31n", reflect.TypeOf((*MockRand)(nil).NextInt31n), n)
}

// NextInt63n mocks base method.
func (m *MockRand) NextInt63n(n int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextInt63n", n)
	ret0, _ := ret[0].(int64)
	return ret0
}

// NextInt63n indicates an expected call of NextInt63n.
func (mr *MockRandMockRecorder) NextInt63n(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextInt63n", reflect.TypeOf((*MockRand)(nil).NextInt63n), n)
}

// NextIntn mocks base method.
func (m *MockRand) NextIntn(n int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextIntn", n)
	ret0, _ := ret[0].(int)
	return ret0
}

// NextIntn indicates an expected call of NextIntn.
func (mr *MockRandMockRecorder) NextIntn(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextIntn", reflect.TypeOf((*MockRand)(nil).NextIntn), n)
}

// Pick mocks base method.
func (m *MockRand) Pick(pickables []random.Pickable) random.Pickable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pick", pickables)
	ret0, _ := ret[0].(random.Pickable)
	return ret0
}

// Pick indicates an expected call of Pick.
func (mr *MockRandMockRecorder) Pick(pickables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pick", reflect.TypeOf((*MockRand)(nil).Pick), pickables)
}

// RangeInt31n mocks base method.
func (m *MockRand) RangeInt31n(start, end int32) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeInt31n", start, end)
	ret0, _ := ret[0].(int32)
	return ret0
}

// RangeInt31n indicates an expected call of RangeInt31n.
func (mr *MockRandMockRecorder) RangeInt31n(start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeInt31n", reflect.TypeOf((*MockRand)(nil).RangeInt31n), start, end)
}

// RangeInt63n mocks base method.
func (m *MockRand) RangeInt63n(start, end int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeInt63n", start, end)
	ret0, _ := ret[0].(int64)
	return ret0
}

// RangeInt63n indicates an expected call of RangeInt63n.
func (mr *MockRandMockRecorder) RangeInt63n(start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeInt63n", reflect.TypeOf((*MockRand)(nil).RangeInt63n), start, end)
}

// RangeIntn mocks base method.
func (m *MockRand) RangeIntn(start, end int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeIntn", start, end)
	ret0, _ := ret[0].(int)
	return ret0
}

// RangeIntn indicates an expected call of RangeIntn.
func (mr *MockRandMockRecorder) RangeIntn(start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeIntn", reflect.TypeOf((*MockRand)(nil).RangeIntn), start, end)
}

// Shuffle mocks base method.
func (m *MockRand) Shuffle(n int, swap func(int, int)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shuffle", n, swap)
}

// Shuffle indicates an expected call of Shuffle.
func (mr *MockRandMockRecorder) Shuffle(n, swap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shuffle", reflect.TypeOf((*MockRand)(nil).Shuffle), n, swap)
}
